<%= title [l(:label_user_plural), users_path], l(:label_user_new) %>

<%= labelled_form_for @user, :html => {:multipart => true} do |f| %>
  <%= render :partial => 'form', :locals => { :f => f } %>
  <% if email_delivery_enabled? %>
  <p><label><%= check_box_tag 'send_information', 1, params[:send_information] %> <%= l(:label_send_information) %></label></p>
  <% end %>

  <% attachment_param ||= 'attachments' %>
<% saved_attachments ||= container.saved_attachments if defined?(container) && container %>
<% multiple = true unless defined?(multiple) && multiple == false %>
<% show_add = multiple || saved_attachments.blank? %>
<% description = (defined?(description) && description == false ? false : true) %>
<% css_class = (defined?(filedrop) && filedrop == false ? '' : 'filedrop') %>

<span class="attachments_form">
  <span class="attachments_fields">
  <% if @user.attachments.present? %>
    <% @user.attachments.each_with_index do |attachment, i| %>
      <span id="attachments_p<%= i %>">

        <%= text_field_tag("#{attachment_param}[p#{i}][filename]", attachment.filename, :class => 'filename') %>
        <% if attachment.container_id.present? %>
          <%= link_to l(:label_delete), "#", :onclick => "$(this).closest('.attachments_form').find('.add_attachment').show(); $(this).parent().remove(); return false;", :class => 'icon-only icon-del' %>
        <% else %>
          <%= text_field_tag("#{attachment_param}[p#{i}][description]", attachment.description, :maxlength => 255, :placeholder => l(:label_optional_description), :class => 'description') if description %>
          <%= link_to('&nbsp;'.html_safe, attachment_path(attachment, :attachment_id => "p#{i}", :format => 'js'), :method => 'delete', :remote => true, :class => 'icon-only icon-del remove-upload') %>
        <% end %>
      </span>
    <% end %>

  <% end %>
  </span>
  <span class="add_attachment" style="<%= show_add ? nil : 'display:none;' %>">
    <%= file_field_tag "#{attachment_param}[dummy][file]",
        :id => nil,
        :class => "file_selector #{css_class}",
        :multiple => multiple,
        :onchange => 'addInputFiles(this);',
        :data => {
          :max_file_size => Setting.attachment_max_size.to_i.kilobytes,
          :max_file_size_message => l(:error_attachment_too_big, :max_size => number_to_human_size(Setting.attachment_max_size.to_i.kilobytes)),
          :max_concurrent_uploads => Redmine::Configuration['max_concurrent_ajax_uploads'].to_i,
          :upload_path => uploads_path(:format => 'js'),
          :param => attachment_param,
          :description => description,
          :description_placeholder => l(:label_optional_description)
        } %>
    (<%= l(:label_max_size) %>: <%= number_to_human_size(Setting.attachment_max_size.to_i.kilobytes) %>)
  </span>
</span>

<% content_for :header_tags do %>
  <%= javascript_include_tag 'attachments' %>
<% end %>

   <p>
    <%= submit_tag l(:button_create) %>
    <%= submit_tag l(:button_create_and_continue), :name => 'continue' %>
  </p>
<% end %>

<% if @auth_sources.present? && @auth_sources.any?(&:searchable?) %>
  <%= javascript_tag do %>
    observeAutocompleteField('user_login', '<%= escape_javascript autocomplete_for_new_user_auth_sources_path %>', {
      select: function(event, ui) {
        $('input#user_firstname').val(ui.item.firstname);
        $('input#user_lastname').val(ui.item.lastname);
        $('input#user_mail').val(ui.item.mail);
        $('select#user_auth_source_id option').each(function(){
          if ($(this).attr('value') == ui.item.auth_source_id) {
            $(this).prop('selected', true);
            $('select#user_auth_source_id').trigger('change');
          }
        });
      }
    });
  <% end %>
<% end %>
